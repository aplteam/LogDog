[DATA]:index='ViewHelp.exe ⋄ Run Help in stand-alone mode ⋄ Stand-alone help ⋄ Runtime help ⋄ Help file icon ⋄ Icon, shown by help file ⋄ Command line parm for ViewHelp.exe ⋄ ViewHelp.exe command line parm ⋄ Helpfolder command line parms ⋄ Stand-alone viewer'

# Run as stand-alone application

## Overview

`ViewHelp.exe` has just one purpose: to put a help system on display by double-clicking the EXE,
although it can also be used in other ways: you can start the help from within APL via a `⎕CMD`
statement, for example.

By default the EXE expects the compiled file to live in a folder `Files\` which is a sibling
of the EXE. See →[*.Compiled_File|] for details.

You can create such a folder by calling the `CompileHelpFilesInto` function:

~~~
source #.Markdown2Help.CompileHelpFilesInto ⍬
~~~

Instead of passing an empty vector as right argument (which defaults to `Files\` in
the current directory) you can specify a directory as right argument:

~~~
source CompileHelpFilesInto 'C:\Foo\Help'
~~~

## Command line parameters

There are two command line parameters recognized by the EXE.

### The "helpfolder" parameter

By default the EXE assumes to find its help file in a certain place. If you can't do this for any
reason then you can specify a folder via this parameter. See "Separate the EXE from `Files\`" at the
bottom of this page for details.

### The "page" parameter

By default the EXE displays the first help page. You can specify a different page with this
parameter. If the page name is unique in a help system you can specify it as `-page=pagename`, otherwise
you have to qualify it fully like `-page=nodename.pagename`.

**Notes**:

* The page name is case sensitive.
* The key words are case insensitive.
* You may or may not enclose the values between double-quotes.


## The help icon

If you wish to have your own icon when your help system is displayed then you could name the ICO
file `help.ico` and put it into the `Files\` folder; that will do. Note that there is already such 
a file which is the `Markdown2Help` default icon. By replacing that file you get your custom icon.

Instead you could specify the `→[*.helpIcon]` parameter; see there for details.

## Separate the EXE from the Files\ folder

If for any reason you cannot make sure that `ViewHelp.exe` is a sibling of `Files\` then
follow these steps:

1. Move the EXE to the appropriate place.
1. Create a shortcut or a \*.BAT file pointing to `ViewHelp.exe`
1. Specify the folder which hosts the `Files\` folder as a command line parameter to `ViewHelp.exe`

Example:

~~~
ViewHelp.exe -helpfolder=C:\Foo\Help
~~~

This will overwrite the default.
