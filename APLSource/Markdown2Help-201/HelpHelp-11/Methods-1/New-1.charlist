[DATA]:index='New ⋄ Create instance ⋄ Instance, create a'

# \{r\}←\{enforceCompile\} New ps

This method creates a new instance of `Markdown2Help`.

`enforceCompile` is an optional Boolean that has no default; `Markdown2Help` compiles the help
file into a temporary folder if `→[*.folderName]` was not specified, even if no left argument 
was specified.

Note that `New` returns a ref pointing to the help GUI. Note also that deleting this reference will
**not** destroy the GUI. Use the `→[*.CloseHelp]` method to achieve this.

Via the reference you can access data easily, but you are **not** permitted to actually change
anything. If you want to change a property like "visible" use one of official methods like
`→[*.SetVisible]`. The following examples assume that the name of the  reference pointing to the
help is `ref`.

## Parameters

The →[*.Parameters | parameters] are saved in `ref.p`. For a full list execute this:

~~~
ref.p.∆List
~~~

## Internal data

The internal data is saved in `ref.d`. An example is `ref.d.tree` which is the tree structure that
drives the GUI.

## The compiled file

`ref.f`, if it exists, contains information about the compiled file.

`ref.f` contains `tieNumber` and `filename` as well as several variables starting their names with 
a "`∆`" character: these are useful to index into the file:

* `∆Words`
* `∆index`
* `∆tree`
* `∆words`

For examples, in order to read the tree that is driving the GUI this would work:

~~~
      ⍴⎕FREAD ∆Ref.f.(tieNo ∆tree)
60 7
~~~

Of course it is **not** a good idea to temper with the contents of the file directly. Instead you
should interact with the GUI.
